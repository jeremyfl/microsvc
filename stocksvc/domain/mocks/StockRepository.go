// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "gitlab.com/jeremylo/microsvc/stocksvc/domain/model"
)

// StockRepository is an autogenerated mock type for the StockRepository type
type StockRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx
func (_m *StockRepository) Get(ctx context.Context) []*model.Stock {
	ret := _m.Called(ctx)

	var r0 []*model.Stock
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Stock); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Stock)
		}
	}

	return r0
}

// Show provides a mock function with given fields: ctx, payload
func (_m *StockRepository) Show(ctx context.Context, payload *model.Stock) *model.Stock {
	ret := _m.Called(ctx, payload)

	var r0 *model.Stock
	if rf, ok := ret.Get(0).(func(context.Context, *model.Stock) *model.Stock); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Stock)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, filter, payload
func (_m *StockRepository) Update(ctx context.Context, filter *model.Stock, payload *model.Stock) error {
	ret := _m.Called(ctx, filter, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Stock, *model.Stock) error); ok {
		r0 = rf(ctx, filter, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
